name: CIRCT-HLS

on: [push]

jobs:
  build:
    container:
      image: ghcr.io/circt/images/circt-ci-build:20211130162811
    name: Build ${{ matrix.build }} ${{ matrix.os }} ${{ matrix.compiler }} Tests? ${{ matrix.tests }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        build: ["Release"] #, "Debug"] # "RelWithDebInfo"
        os: [ubuntu-latest]
        tests: [enabled, disabled]
        compiler:
          - cc: clang
            cxx: clang++

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: 'recursive'

    - name: Install Python requirements
      run: |
        pip3 install -r requirements.txt

    - name: Get rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    # Checkout verilator. We build verilator ourselves due to needing a recent
    # version - more recent than that which is available through apt-get.
    - name: Checkout Verilator
      uses: actions/checkout@v2
      with:
        repository: verilator/verilator
        path: verilator
        submodules: 'recursive'
        fetch-depth: 1
        ref: stable
    
    - name: Cache Verilator
      id: cache-verilator
      uses: actions/cache@v2
      with:
        path: |
          verilator/bin
          verilator/src/obj_dbg
          verilator/src/obj_opt
        key: ${{ matrix.build }}-${{ matrix.os }}-verilator-${{ hashFiles('verilator/.git/HEAD') }}

    # Build Verilator. We don't do this conditionally on the cache since we still
    # need to install it into path.
    - name: Verilator build
      env:
          CC: ${{ matrix.compiler.cc }}
          CXX: ${{ matrix.compiler.cxx }}
      run: |
        apt-get install -y git perl python3 make autoconf g++ flex bison
        apt-get install -y libgoogle-perftools-dev numactl perl-doc ccache
        apt-get install -y libfl2 libfl-dev zlibc zlib1g zlib1g-dev
        cd verilator
        autoconf
        ./configure
        make -j $(nproc)
        make install

    # Checkout CIRCT. This also checks out CIRCTs LLVM submodule
    - name: Checkout CIRCT
      uses: actions/checkout@v2
      with:
        repository: llvm/circt
        path: circt    
        submodules: 'recursive'
        fetch-depth: 1

    # Cache the LLVM submodule inside CIRCT
    - name: Cache CIRCT LLVM/MLIR
      id: cache-circt-llvm
      uses: actions/cache@v2
      with:
        path: circt/llvm/build
        key: ${{ matrix.build }}-${{ matrix.os }}-circt-llvm-${{ hashFiles('circt/.git/modules/llvm/HEAD') }}

    # Build LLVM+MLIR
    - name: CIRCT LLVM+MLIR build
      if: steps.cache-circt-llvm.outputs.cache-hit != 'true'
      env:
          CC: ${{ matrix.compiler.cc }}
          CXX: ${{ matrix.compiler.cxx }}
      run: |
        mkdir -p circt/llvm/build
        cd circt/llvm/build
        cmake -G Ninja ../llvm \
            -DLLVM_BUILD_EXAMPLES=OFF \
            -DLLVM_ENABLE_BINDINGS=OFF \
            -DBUILD_SHARED_LIBS=ON \
            -DLLVM_ENABLE_LLD=ON \
            -DLLVM_OPTIMIZED_TABLEGEN=ON \
            -DLLVM_ENABLE_PROJECTS="mlir" \
            -DLLVM_TARGETS_TO_BUILD="host" \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DCMAKE_BUILD_TYPE=Release
        ninja -j$(nproc)

    # Cache CIRCT itself
    - name: Cache CIRCT
      id: cache-circt
      uses: actions/cache@v2
      with:
        path: circt/build
        key: ${{ matrix.build }}-${{ matrix.os }}-circt-${{ hashFiles('circt/.git/HEAD') }}

    # Build CIRCT
    - name: CIRCT build
      if: steps.cache-circt.outputs.cache-hit != 'true'
      env:
          CC: ${{ matrix.compiler.cc }}
          CXX: ${{ matrix.compiler.cxx }}
      run: |
        mkdir -p circt/build
        cd circt/build
        cmake -G Ninja .. \
          -DMLIR_DIR=$PWD/../llvm/build/lib/cmake/mlir \
          -DLLVM_DIR=$PWD/../llvm/build/lib/cmake/llvm \
          -DLLVM_ENABLE_ASSERTIONS=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        ninja -j$(nproc)

    # STEP 2: Build Polygeist + LLVM + MLIR. We do this separately from the CIRCT
    # build since there are often API-breaking changes between the two versions...
    # Checkout already done due to Polygeist being a submodule
    - name: Cache Polygeist MLIR+LLVM
      id: cache-polygeist-llvm
      uses: actions/cache@v2
      with:
        path: Polygeist/llvm-project/build
        key: ${{ matrix.build }}-${{ matrix.os }}-polygeist-llvm-v3-${{ hashFiles('.git/modules/Polygeist/modules/llvm-project/HEAD') }}

    - name: Polygeist LLVM+MLIR build
      if: steps.cache-polygeist-llvm.outputs.cache-hit != 'true'
      env:
          CC: ${{ matrix.compiler.cc }}
          CXX: ${{ matrix.compiler.cxx }}
      run: |
        mkdir -p Polygeist/llvm-project/build
        cd Polygeist/llvm-project/build
        cmake ../llvm -GNinja \
          -DLLVM_ENABLE_PROJECTS="llvm;clang;mlir;openmp" \
          -DBUILD_SHARED_LIBS=ON \
          -DLLVM_ENABLE_LLD=ON \
          -DLLVM_OPTIMIZED_TABLEGEN=ON \
          -DCMAKE_BUILD_TYPE=${{ matrix.build }} \
          -DCMAKE_CXX_FLAGS="-Wno-c++11-narrowing"
        ninja -j$(nproc)

    - name: Cache Polygeist
      id: cache-polygeist
      uses: actions/cache@v2
      with:
        path: Polygeist/build
        key: ${{ matrix.build }}-${{ matrix.os }}-polygeist-v2-${{ hashFiles('.git/modules/Polygeist/HEAD') }}

    - name: Build Polygeist
      if: steps.cache-polygeist.outputs.cache-hit != 'true'
      env:
            CC: ${{ matrix.compiler.cc }}
            CXX: ${{ matrix.compiler.cxx }}
      run: |
        mkdir -p Polygeist/build
        cd Polygeist/build
        cmake -G Ninja .. \
          -DMLIR_DIR=$PWD/../llvm-project/build/lib/cmake/mlir \
          -DCLANG_DIR=$PWD/../llvm-project/build/lib/cmake/clang \
          -DLLVM_TARGETS_TO_BUILD="host" \
          -DLLVM_ENABLE_ASSERTIONS=ON \
          -DCMAKE_BUILD_TYPE=${{ matrix.build }}
        ninja -j$(nproc)
        ninja mlir-clang

    # # Step 3: Calyx setup
    # - name: Calyx setup
    #   run: bash calyx_setup.sh


    # Step 4: CIRCT-HLS build
    # Cache CIRCT itself
    - name: Cache CIRCT-HLS
      id: cache-circt-hls
      uses: actions/cache@v2
      with:
        path: build
        key: ${{ matrix.build }}-${{ matrix.os }}-circt-hls-v2-${{ hashFiles('.git/refs/heads/main') }}

    # Build CIRCT-HLS
    - name: CIRCT-HLS build
      if: steps.cache-circt-hls.outputs.cache-hit != 'true'
      env:
          CC: ${{ matrix.compiler.cc }}
          CXX: ${{ matrix.compiler.cxx }}
      run: |
        ls Polygeist/build/bin
        mkdir -p build
        cd build
        cmake -G Ninja .. \
          -DCIRCT_DIR=$PWD/../circt/build/lib/cmake/circt \
          -DMLIR_DIR=$PWD/../circt/llvm/build/lib/cmake/mlir \
          -DLLVM_DIR=$PWD/../circt/llvm/build/lib/cmake/llvm \
          -DLLVM_ENABLE_ASSERTIONS=ON \
          -DCMAKE_BUILD_TYPE=${{ matrix.build }}
        ninja -j$(nproc)

    # Step conditionals are evaluated before matrix expansion, so we cannot use
    # ${{ matrix.tests }} in the 'if'...
    - name: Test CIRCT-HLS
      run: |
        bash .github/workflows/scripts/run_tests.sh ${{ matrix.tests }}
