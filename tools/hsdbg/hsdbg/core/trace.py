from dataclasses import dataclass, field
from hsdbg.core.utils import *


@dataclass
class Instance:
  name: str  # Name of this instance. should not include hierarchical (parent) name.
  parent: None  # parent instance.
  children: list = field(default_factory=list)  # List of child instances.
  signals: list = field(
      default_factory=list)  # List of signals in this instance.

  def getHierName(self, joiner=lambda x, r: f"{x}.{r}"):
    if not self.parent:
      return self.name
    else:
      # Returns the hierarchical name of the top-level instance.
      return joiner(self.parent.getHierName(joiner), self.name)


@dataclass
class Signal:
  name: str  # Name of this signal. Should not include hierarchical (parent) name.
  parent: Instance  # Parent instance.

  def getHierName(self, joiner=lambda x, r: f"{x}.{r}"):
    return joiner(self.parent.getHierName(joiner), self.name)


class Trace:
  """This is the base class for a trace file. A trace file can be queried
  for a given simulation step to retrieve the value of a given signal.

  This class allows for trace information to be either static (through a file)
  but places no restrictions on signal information being generated by some
  runtime system.
  """

  def __init__(self, filename):
    self.filename = filename
    self.file = open(filename, "r")

    # A mapping between Signal's and their identifier in the trace.
    # It is implementation-defined what the key of this map is.
    self.signalMap = {}

    # Index the trace store the top-level instance
    self.top = self.index()
    if not self.top:
      raise Exception("self.index() did not return a top-level instance!")

  def getTopInstance(self):
    if not self.top:
      raise Exception("Top instance not found in trace!")
    return self.top

  def query(self, signal, step):
    # Returns the value of 'signal' at the given simulation
    # step.
    raise NotImplementedError()

  def getStartTime(self):
    # Returns the first timestep of the simulation
    raise NotImplementedError()

  def getEndTime(self):
    # Returns the last timestep of the simulation
    raise NotImplementedError()

  def getTimestep(self):
    # Returns the timestep interval of the simulation
    return 1

  def index(self):
    """ @TODO: write comment once stable API."""
    raise NotImplementedError()
