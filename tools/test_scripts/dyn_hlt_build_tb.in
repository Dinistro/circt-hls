#!/usr/bin/env bash

# The first argument to the script is the kernel or testbench which the Simulator
# was generated from.
# A testbench is defined as the kernel file prefixed with "tst_"

set -e
sourceDir=$(dirname $1)
basename=${1##*/}
basename=${basename%.*}

if [[ "$basename" == "tst_"* ]]; then
    basename=${basename#tst_}
fi

# Lower polygeist to MLIR. Ensure to run polygeist canonicalization since
# a lot of pointer/memref legalization takes places within the canonicalization
# patterns of Polygeist.
@MLIR-CLANG_PATH@ -S --function=* --memref-fullrank $1 \
  | @POLYGEIST-OPT_PATH@ --canonicalize > ${basename}_tb_poly.mlir

# Run memref-call flattening. This is specific to handshake kernels since they do
# not support multidimensional memories at the moment
@CIRCT_INCLUDE_DIR@/../bin/circt-opt --flatten-memref-calls ${basename}_tb_poly.mlir > ${basename}_tb_poly_flat.mlir

# Asynchronize to adhere with HLT. We assume that the testname is equal to the
# kernel name - which in turn is the function to asynchronize.
@CIRCT_HLS_BINARY_DIR@/bin/hls-opt --asyncify-calls="function=${basename}" \
  ${basename}_tb_poly_flat.mlir > ${basename}_tb.mlir

# Lower to LLVM
@LLVM_BINARY_DIR@/bin/mlir-opt \
   -lower-affine \
   -convert-scf-to-std                        \
   -std-expand \
   -convert-memref-to-llvm                                                     \
   -convert-std-to-llvm                                                        \
   -reconcile-unrealized-casts \
   ${basename}_tb.mlir > ${basename}_tb_llvm.mlir
